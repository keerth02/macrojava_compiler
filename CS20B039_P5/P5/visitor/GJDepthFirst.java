//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	String destReg;
	int inArgs, outArgs;
	boolean printLabel;
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   int argtype = -1;
   boolean lbl = false;
   public String result;
   int functype = -1;


   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      result = "\t.text\n\t.globl  main\nmain:\n";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String stacksize = (String) n.f5.accept(this, argu);
      int size = Integer.parseInt(stacksize);
      size = (size+4)*4;
      result = result + "\tsw $ra, -4($sp)\n" + "\tsw $fp, -8($sp)\n" + "\tmove $fp, $sp\n" + "\tsubu $sp, $sp, " + size + "\n";
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);      
      n.f9.accept(this, argu);      
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      result = result + "\tlw $ra, -4($fp)\n" + "\taddu $sp, $sp, " + size + "\n" + "\tjal _exitret\n\n";
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);    
      result = result + "\n\n\t.text \n\t.globl _print  \n_print:  \n\tli $v0, 1 \n\tsyscall \n\tla $a0, newl \n\tli $v0, 4 \n\tsyscall \n\tjr $ra\n\n";
      result = result + "\n\n\t.text \n\t.globl _halloc \n_halloc: \n\tli $v0, 9 \n\tsyscall \n\tjr $ra\n\n";
      result = result + "\n\n\t.text \n\t.globl _exitret\n_exitret: \n\tli $v0, 10 \n\tsyscall\n" + "\n";
      result = result + "\t.data\n\t.align   0" + "\n";
      result = result + "newl:    .asciiz \"\\n\"\n\n";
      result = result + "\t.data\n\t.align   0" + "\n";
      result = result + "error_msg:  .asciiz \" ERROR: Abnormally terminated!\\n \"\n";
      //System.out.print(result);    
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      
      printLabel = true;
      lbl = true;
      n.f0.accept(this, argu);
      lbl = false;
      printLabel = false;
      R _ret=null;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      
      String str = (String) n.f0.accept(this, argu);
      result = result + "\t.text\n" + "\t.globl\t" + str + "\n" + str +":\n";
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String stacksize = (String) n.f5.accept(this, argu);
      int size = Integer.parseInt(stacksize);
      size = 4*(size+4);
      result = result + "\tsw $ra, -4($sp)" + "\n" + "\tsw $fp, -8($sp)\n" + "\tmove $fp, $sp\n" + "\tsubu $sp, $sp, "+ size + "\n";     
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      result = result + "\tlw $ra, -4($fp)\n" + "\tlw $fp,-8($fp)\n" + "\taddu $sp, $sp, "+size + "\n" + "\tjr $ra" + "\n";  
      R _ret=null;   
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      lbl = false;
      n.f0.accept(this, argu);
      lbl = true;
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tnop" + "\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tb error_msg\n" + "\n";
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tbeqz "+ ((String) n.f1.accept(this, argu)) +","+ ((String) n.f2.accept(this, argu)) + "\n";
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tb "+ ((String) n.f1.accept(this, argu)) + "\n";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tsw "+((String) n.f3.accept(this, argu))+", "+((String) n.f2.accept(this, argu))  +"("+((String) n.f1.accept(this, argu))+")" + "\n";    
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      result = result + "\tlw "+((String) n.f1.accept(this, argu))+", "+((String) n.f3.accept(this, argu))+"("+((String) n.f2.accept(this, argu))+")" + "\n";
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f2.accept(this, (A) ((String) n.f1.accept(this, argu)));
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      
      n.f0.accept(this, argu);
      String info = (String) n.f1.accept(this, argu);

      result = result + "\tsw $a0 -12($fp)" + "\n" + "\tsw $v0 -16($fp)" + "\n";

      if(argtype==0)
         result = result + "\tmove $a0,"+info + "\n";
      else if(argtype==1)
         result = result + "\tli $a0,"+info + "\n";
      else if(argtype==2)
         result = result + "\tla $a0,"+info + "\n";

      result = result + "\tjal _print\n" + "\tlw $a0 -12($fp)\n" + "\tlw $v0 -16($fp)\n";
      argtype=-1;
      R _ret=null;
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tlw "+ ((String) n.f1.accept(this, argu)) +" "+-(4*( Integer.parseInt((String)n.f2.accept(this, argu)) +5))+"($fp)\n";
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      result = result + "\tsw "+ (String) n.f2.accept(this, argu) +" "+-(4*(Integer.parseInt((String)n.f1.accept(this, argu))+5))+"($fp)\n";
      
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      result = result + "\tsw "+((String)n.f2.accept(this, argu))+" "+-(4*(Integer.parseInt((String)n.f1.accept(this, argu))+4))+"($sp)\n";
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = (String) n.f1.accept(this, argu);
      boolean argbool = true;

      if(argtype==0)
      {
         result = result + "\tjalr "+s + "\n";
      }
      else if(argtype>0)
      {
         result = result + "\tjal "+s+"\n";
      }

      if(argbool) argtype=-1;
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      
      String str = (String) n.f0.accept(this, argu);
      String info = str;
      String knownreg = (String) argu;

      if(functype==0)
      {
         result = result + "\tsw $a0 -12($fp)"+"\n" + "\tsw $v0 -16($fp)" + "\n";
         if(argtype==0)
            result = result + "\tmove $a0,"+info+"\n";
         else if(argtype==1)
            result = result + "\tli $a0,"+info + "\n";
         else if(argtype==2)
            result = result + "\tla $a0,"+info + "\n";

         result = result + "\tjal _halloc" + "\n" + "\tmove "+knownreg+","+"$v0" + "\n" + "\tlw $a0 -12($fp)" + "\n" + "\tlw $v0 -16($fp)" + "\n";
      }
      else if(functype==1)
      {
         String[] arr = info.split("\\s+");
         result = result + "\t"+arr[0]+" "+knownreg+","+arr[1]+","+arr[2] + "\n";
      }
      else if(functype==2)
      {
         if(argtype==0)
            result = result + "\tmove "+knownreg+","+info+"\n";
         else if(argtype==1)
            result = result + "\tli "+knownreg+","+info+"\n";
         else if(argtype==2)
            result = result + "\tla "+knownreg+","+info+"\n";
      }
      
      argtype=-1;
      functype=-1;
      R _ret=null;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
   
      n.f0.accept(this, argu);
      String op = (String) n.f1.accept(this, null);
      boolean flag = true;
      if(flag) functype=0;
      return (R) op;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
     
      String operator = (String) n.f0.accept(this, argu);
      String op = operator;
      String reg = (String) n.f1.accept(this, argu);
      String simpexp = (String) n.f2.accept(this, argu);

      functype=1;
      String ret = op+" "+reg+" "+simpexp;
      
      return (R) ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      
      String str = (String) n.f0.accept(this, argu);
      String ret = " ";
      if(str == "LE") ret = "sle";
      if(str=="NE") ret = "sne";
      if(str=="PLUS") ret = "add";
      if(str=="MINUS") ret = "sub";
      if(str=="TIMES") ret = "mul";
      if(str=="DIV") ret = "div";
      return (R) ret;
      
      
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      
      n.f0.accept(this, argu);
      
      return (R) ((String) n.f1.accept(this, argu));
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      

      String ret = (String) n.f0.accept(this, argu);
      boolean flag = true;
      if(flag) functype=2;
      return (R) ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      
      String ret = "$"+(String) n.f0.accept(this, argu);                                       
      argtype = 0;  
      return (R) ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      
      boolean placeholder = true;
      String ret = (String) n.f0.accept(this, argu);
      if(placeholder) argtype=1;
      return (R) ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      
      String ret = (String) n.f0.accept(this, argu);
      if(lbl) result = result + ret +":";
      boolean f = false;
      if(!f) argtype=2;
      R _ret = null;
      return (R) ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
