//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   class Var{

   String name;
   String type;

   public String getName(){
      return name;
   }
   public String getType(){
      return type;
   }
   public void setType(String newtype){
      this.type = newtype;
   }
   public void setName(String newname){
      this.name = newname;
   }
   
}


class Meth{

   String name;
   String returnType;

   Vector<Var> VariableList = new Vector<Var>();
   Vector<Var> ParameterList = new Vector<Var>();

   public String getName(){
      return name;
   }
   public String getreturnType(){
      return returnType;
   }
   public Vector<Var> getVariableList(){
      return VariableList;
   }
   public Vector<Var> getParameterList(){
      return ParameterList;
   }


   public void setName(String name){
      this.name = name;
   }
   public void setreturnType(String type){
      this.returnType = type;
   }


   public String FindIdType(String ID)
   {
      if(ID==null) return null;

      String IDtype;
      IDtype = null;

      for(int i=0;i<ParameterList.size();i++)
         if(ParameterList.get(i).getName()==ID)
            IDtype = ParameterList.get(i).getType();

      for(int i=0;i<VariableList.size();i++)
         if(VariableList.get(i).getName()==ID)
            IDtype = VariableList.get(i).getType();

      return IDtype;
   }

   public boolean IsDistinctParameter()
   {
      int flag = 0;
      int s = ParameterList.size();
      for(int i=0;i<s;i++)
         for(int j=i+1;j<s;j++)
            if(ParameterList.get(j).getName()==ParameterList.get(i).getName()) flag++;
      
      return (flag==0);
   }

   public boolean IsDistinctVar()
   {
      int flag = 0;
      int s = VariableList.size();
      for(int i=0;i<s;i++)
         for(int j=i+1;j<s;j++)
            if(VariableList.get(j).getName()==VariableList.get(i).getName()) flag++;
      
      return (flag==0);
   }

   public boolean IsDistinctParVar()
   {
      int flag = 0;
      for(int i=0;i<ParameterList.size();i++)
         for(int j=i+1;j<VariableList.size();j++)
            if(ParameterList.get(i).getName()==VariableList.get(j).getName()) 
               flag++;

      return (flag==0);
   }

   public boolean ComparePars(Vector<String> Parameters, symbolTable Map)
   {

      if(Parameters == null)
         return ParameterList.isEmpty();
      
      if(ParameterList.size()!=Parameters.size()) return false;

      for(int i=0;i<Parameters.size();i++)
      {
         if(Parameters.get(i)!=ParameterList.get(i).getType())
         {
            if(! Map.CheckSubType(ParameterList.get(i).getType(),Parameters.get(i)))
               return false;
         }
      }

      return true;
   }

}


 class Class{

   String name;
   String extension;

   Vector<Var> VariableList = new Vector<Var>();
   Vector<Meth> MethodList = new Vector<Meth>();

   public String getName(){
      return name;
   }
   public String getextension(){
      return extension;
   }
   public Vector<Var> getVariableList(){
      return VariableList;
   }
   public Vector<Meth> getMethodList(){
      return MethodList;
   }

   public void setName(String name){
      this.name = name;
   }
   public void setextension(String ext){
      this.extension = ext;
   }



   public boolean IsDistinctVar()
   {
      int flag = 0;
      int s = VariableList.size();
      for(int i=0;i<s;i++)
         for(int j=i+1;j<s;j++)
            if(VariableList.get(j).getName()==VariableList.get(i).getName()) flag++;
      
      return (flag==0);
   }

   public boolean IsDistinctMeth()
   {
      int flag = 0;
      int s = MethodList.size();
      for(int i=0;i<s;i++)
         for(int j=i+1;j<s;j++)
            if(MethodList.get(j).getName()==MethodList.get(i).getName()) flag++;
      
      return (flag==0);
   }

   public String FindIdType(String ID)
   {
      if(ID==null) return null;

      String IDtype;
      IDtype = null;

      for(int i=0;i<VariableList.size();i++)
         if(VariableList.get(i).getName()==ID)
            IDtype = VariableList.get(i).getType();

      return IDtype;
   }

   public int FindMethod(String ID)
   {
      int pos = -1;
      if(ID==null) return pos;

      for(int i=0;i<MethodList.size();i++)
         if(MethodList.get(i).getName()==ID) 
            pos = i;

      return pos;

   }

}


class symbolTable{

   Vector<Class> ClassList = new Vector<Class>();

   public Vector<Class> getClassList(){
      return ClassList;
   }

   public boolean IsDistinct()
   {
      int flag = 0;
      int s = ClassList.size();
      for(int i=0;i<s;i++)
         for(int j=i+1;j<s;j++)
            if(ClassList.get(j).getName()==ClassList.get(i).getName()) flag++;
      
      return (flag==0);
   }

   public int FindClassIndex(String id)
   {
      int pos = -1;
      if(id==null) return pos;

      for(int i=0;i<ClassList.size();i++)
      {
         if(ClassList.get(i).getName()==id)
            pos = i;
      }
      return pos;
   }

   public boolean isConsistent()
   {
      boolean ret;
      ret = true;
      char brflag = 'a';

      for(int i=0;i<ClassList.size();i++)
      {                    
         String p = new String();
         p = ClassList.get(i).getextension();

         while(p != null)
         {
            int pos = this.FindClassIndex(p);
            if(pos==-1)
            {
               brflag = 'b';
               ret = false;
               break;
            }

            for(int j=0;j<ClassList.get(i).getMethodList().size();j++)
            {
               if(ClassList.get(i).getMethodList().get(j).getName()==null)
               {
                  ret = false;
                  brflag='b';
                  break;
               }

               for(int k=0;k<ClassList.get(pos).getMethodList().size();k++)
               {
                  if(ClassList.get(pos).getMethodList().get(k).getName()==null)
                  {
                     ret = false;
                     brflag='b';
                     break;
                  }

                  Meth m = new Meth();
                  m = ClassList.get(i).getMethodList().get(j);
                  Meth parentm = new Meth();
                  parentm = ClassList.get(pos).getMethodList().get(k);

                  if(m.getName()==parentm.getName())
                  {
                     if(m.getParameterList().size()==parentm.getParameterList().size()){

                        for(int l=0;l<m.getParameterList().size();l++)
                        {
                           if(m.getParameterList().get(l).getType()!=parentm.getParameterList().get(l).getType())
                           {
                              ret = false;
                              brflag = 'b';
                              break;
                           }
                        }
                     }
                     else 
                     {
                        brflag = 'b';
                        ret = false;
                        break;
                     }

                     if(m.getreturnType()!=parentm.getreturnType())
                     {
                        brflag = 'b';
                        ret = false;
                        break;
                     }
                  }

               }

               if(brflag=='b') break;
            }
            if(brflag=='b') break;
            p = ClassList.get(pos).getextension();
         }
         if(brflag=='b') break;
      }
      return ret;
   }


   public String findtypeinAncestor(int cl, String s)
   {
      if(cl==-1) return null;
      String ret = null;
      String ext = new String();
      ext = ClassList.get(cl).getextension();
      ret = ClassList.get(cl).FindIdType(s);

      if(ret==null && ext!=null)
         ret = this.findtypeinAncestor(this.FindClassIndex(ext),s);

      return ret;
   }


   public String FindType(int cl, int m, String s)
   {
      if(cl==-1||m==-1) return null;

      String ret = new String();
      ret = ClassList.get(cl).getMethodList().get(m).FindIdType(s);
      if(ret==null) ret = this.findtypeinAncestor(cl,s);

      return ret;
   }

   public boolean CheckSubType(String c1, String c2)
   {
      if(c2==null||c1==null) 
         return false;
      boolean ret = true;
      if(c1==c2) 
         return ret;

      if(this.FindClassIndex(c2)==-1) return false;
      if(ClassList.get(this.FindClassIndex(c2)).getextension() == null)
      {
         ret = false;
         return ret;
      }

      else {
         String ext = new String();
         ext = ClassList.get(this.FindClassIndex(c2)).getextension();
         ret = CheckSubType(c1, ext);
      }

      return ret;
   }

   public boolean SameType(int cl, int m, String t1, String t2)
   {
      if(cl == -1 || m == -1) return false;
      if(t1==null || t2 == null) return false;

      if(t1==t2) return true;
      return this.CheckSubType(t1, t2);
   }


   public String Overload(int cl, int primcl, int checkcl, String method)
   {
      if(cl ==-1||checkcl==-1) return null;

      int pos = ClassList.get(checkcl).FindMethod(method);
      Meth m = new Meth();
      m = ClassList.get(checkcl).getMethodList().get(pos);

      if(pos!=-1)
      {
         return ClassList.get(checkcl).getName();     
      }

      String ext = ClassList.get(checkcl).getextension();
      if(ext!=null) return this.Overload(cl, primcl, this.FindClassIndex(ext),method);
      else return null;
   }

}



   //
   // Auto class visitors--probably don't need to be overridden.

   public symbolTable map = new symbolTable();
   Vector<Meth> MethList = new Vector<Meth>();
   Vector<Var> VarList = new Vector<Var>();

   public int passnumber = 1;
   public boolean error = false;
   boolean isIdentifier = false;
   //public Vector<String> AllErrors = new Vector<String>();
   Vector<Vector<String>> Params = new Vector<Vector<String>>();

   int curClass = -10;
   int curMethod = -10;
  
	public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */
      
      R _ret=null;
      
      if(passnumber ==1){
         
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);}
      
      else{

      if(!map.IsDistinct())
      {
         error = true;
         return _ret; 
      }
      if(!map.isConsistent())
      {
         error = true;
         return _ret;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      
      
   
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		
      
      R _ret=null;

      if(passnumber==1){
      Class c = new Class();
      n.f0.accept(this, argu);
      String name = (String) n.f1.accept(this, argu);
      c.setName(name);
      c.setextension(null);
      c.VariableList = new Vector<Var>(VarList);
      c.MethodList = new Vector<Meth>(MethList);
      VarList.clear();
      MethList.clear();
      map.ClassList.add(c);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;}

      else{

      n.f0.accept(this, argu);
      //System.out.println(curClass);
      String name = (String) n.f1.accept(this, argu);
      curClass = map.FindClassIndex(name);
      if(curClass==-1)
      {
         error = true;
         return _ret;
      }
      curMethod=-10;
      if(!map.getClassList().get(curClass).IsDistinctVar())
      {
         error = true;
         return _ret;
      }
      //System.out.println(curClass);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return (R) name;
      }
      
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		
      R _ret=null;

      if(passnumber == 1){
      Class c = new Class();
      n.f0.accept(this, argu);
      String name = (String) n.f1.accept(this, argu);
      c.setName(name);
      c.setextension(null);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      c.VariableList = new Vector<Var>(VarList);
      VarList.clear();
      n.f4.accept(this, argu);
      c.MethodList = new Vector<Meth>(MethList);
      MethList.clear();
      n.f5.accept(this, argu);
      map.ClassList.add(c);}

      else{

      n.f0.accept(this, argu);
      String name = (String) n.f1.accept(this, argu);
      curClass = map.FindClassIndex(name);
      //System.out.println(curClass);
      if(curClass==-1)
      {
         error = true;
         return _ret;
      }
      if(!map.getClassList().get(curClass).IsDistinctVar())
      {
         error = true;
         return _ret;
      }
      if(!map.getClassList().get(curClass).IsDistinctMeth())
      {
         error = true;
         return _ret;
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      }   
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		
      R _ret=null;

      if(passnumber == 1){
      Class c = new Class();
      n.f0.accept(this, argu);
      String name = (String) n.f1.accept(this, argu);
      c.setName(name);
      n.f2.accept(this, argu);
      String ext = (String) n.f3.accept(this, argu);
      c.setextension(ext);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      c.VariableList = new Vector<Var>(VarList);
      VarList.clear();
      n.f6.accept(this, argu);
      c.MethodList = new Vector<Meth>(MethList);
      MethList.clear();
      n.f7.accept(this, argu);
      map.ClassList.add(c);}

      else{

      n.f0.accept(this, argu);
      String name = (String) n.f1.accept(this, argu);
      curClass = map.FindClassIndex(name);
      //System.out.println(curClass);
      if(curClass==-1)
      {
         error = true;
         return _ret;
      }
      if(!map.getClassList().get(curClass).IsDistinctVar())
      {
         error = true;
         return _ret;
      }
      if(!map.getClassList().get(curClass).IsDistinctMeth())
      {
         error = true;
         return _ret;
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		
      if(passnumber == 1){
      Var v = new Var();

      R _ret=null;
      String t = (String) n.f0.accept(this, argu);
      v.setType(t);
      String id = (String) n.f1.accept(this, argu);
      v.setName(id);
      VarList.add(v);
      n.f2.accept(this, argu);
      return _ret;}

      else{
         R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		
      if(passnumber == 1){
      Meth m = new Meth();
      R _ret=null;
      n.f0.accept(this, argu);
      String r = (String)n.f1.accept(this, argu);
      m.setreturnType(r);
      String name = (String)n.f2.accept(this, argu);
      m.setName(name);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      m.ParameterList = new Vector<Var>(VarList);
      VarList.clear();
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      m.VariableList = new Vector<Var>(VarList);
      VarList.clear();
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      MethList.add(m);
      return _ret;}


      else{

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String name = (String)n.f2.accept(this, argu);
      curMethod = map.getClassList().get(curClass).FindMethod(name);
      //System.out.println(curMethod);
      if(curMethod==-1)
      {
         error = true;
         return _ret;
      }
      if(  !((!(curClass==-1||curMethod==-1))&&(map.getClassList().get(curClass).getMethodList().get(curMethod).IsDistinctVar()))  ) 
      {
         error = true;
         return _ret;
      }
      if(  !((!(curClass==-1||curMethod==-1))&&(map.getClassList().get(curClass).getMethodList().get(curMethod).IsDistinctParameter()))  ) 
      {
         error = true;
         return _ret;
      }
      if(  !((!(curClass==-1||curMethod==-1))&&(map.getClassList().get(curClass).getMethodList().get(curMethod).IsDistinctParVar()))  ) 
      {
         error = true;
         return _ret;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String s = (String) n.f10.accept(this, argu);
      //returntype matching
      if( !((!(curClass==-1||curMethod==-1)) && (map.getClassList().get(curClass).getMethodList().get(curMethod).getreturnType()==s)) )
      {
         error = true;
         return _ret;
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		
      if(passnumber == 1){
      Var v = new Var();
      R _ret=null;
      String t = (String)n.f0.accept(this, argu);
      v.setType(t);
      String i = (String)n.f1.accept(this, argu);
      v.setName(i);
      VarList.add(v);
      return _ret;}

      else{
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
      }

   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      return (R) type;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "bool";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;}

      else{

         R _ret=null;
         isIdentifier = true;
         String t1 = (String)n.f0.accept(this, argu);
         //System.out.println(t1);
         isIdentifier = false;
         n.f1.accept(this, argu);
         String t2 = (String)n.f2.accept(this, argu);
         //System.out.println(t2);
         if(!map.SameType(curClass,curMethod,t1,t2))
         {
            error = true;
            return _ret;
         }
         n.f3.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;}

      else{
         R _ret=null;
         isIdentifier = true;
         String id = (String)n.f0.accept(this, argu);
         isIdentifier = false;
         if(!map.SameType(curClass,curMethod,id, "int[]"))
         {
            error = true;
            return _ret;
         }
         n.f1.accept(this, argu);
         String e1 = (String) n.f2.accept(this, argu);
         if(!map.SameType(curClass,curMethod,e1, "int"))
         {
            error = true;
            return _ret;
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         String e2 = (String) n.f5.accept(this, argu);
         if(!map.SameType(curClass,curMethod,e2, "int"))
         {
            error = true;
            return _ret;
         }
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e,"bool"))
      {
         error = true;
         return _ret;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e,"bool"))
      {
         error = true;
         return _ret;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e,"bool"))
      {
         error = true;
         return _ret;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;

      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e,"int"))
      {
         error = true;
         return _ret;
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;}

      else{
      R _ret=null;
      String s = (String) n.f0.accept(this, argu);
      return (R) s;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String e1 = (String)n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"bool"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e2,"bool"))
      {
         error = true;
         return _ret;
      }
      return (R) "bool";

      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String e1 = (String)n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"bool"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e2,"bool"))
      {
         error = true;
         return _ret;
      }
      return (R) "bool";
      
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String e1 = (String)n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String)n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e2,"int"))
      {
         error = true;
         return _ret;
      }
      return (R) "bool";
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      /*if(!map.ExactSameType(curClass,curMethod,e1,e2))
      {
         error = true;
         String errorMessage="Error #29";AllErrors.add(errorMessage);return _ret;
      }*/
      return (R) "bool";
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{
      
      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu); 
      if(!map.SameType(curClass,curMethod,e2,"int"))
      {
         error = true;
         return _ret;
      }
      return (R) "int";

      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{
      
      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu); 
      if(!map.SameType(curClass,curMethod,e2,"int"))
      {
         error = true;
         return _ret;
      }
      return (R) "int";

      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{
      
      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu); 
      if(!map.SameType(curClass,curMethod,e2,"int"))
      {
         error = true;
         return _ret;
      }
      return (R) "int";

      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{
      
      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu); 
      if(!map.SameType(curClass,curMethod,e2,"int"))
      {
         error = true;
         return _ret;
      }
      return (R) "int";

      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int[]"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      String e2 = (String) n.f2.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e2,"int"))
      {
         error = true;
         return _ret;
      }
      n.f3.accept(this, argu);
      return (R) "int";
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String e1 = (String) n.f0.accept(this, argu);
      if(!map.SameType(curClass,curMethod,e1,"int[]"))
      {
         error = true;
         return _ret;
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int";

      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;}


      else{

      R _ret=null;
      String firstClass = (String) n.f0.accept(this, argu);
      int checkcl = map.FindClassIndex(firstClass);

      n.f1.accept(this, argu);

      isIdentifier = false;
      String firstmethod = (String) n.f2.accept(this, argu);
      String usedname = map.Overload(curClass, checkcl, checkcl, firstmethod);

      if(usedname==null)
      {
         error = true;
         return _ret;
      }
      int used = map.FindClassIndex(usedname);

      if(used == -1)
      {
         error = true;
         return _ret;
      }

      int firstm = map.getClassList().get(used).FindMethod(firstmethod);
      if(firstm==-1)
      {
         error = true;
         return _ret;
      }

      n.f3.accept(this, argu);

      Vector<String> ParamCheck = new Vector<String>();
      Params.add(ParamCheck);
      n.f4.accept(this, argu);

      int l = Params.size()-1;
      if(! (map.getClassList().get(used).getMethodList().get(firstm).ComparePars(Params.get(l),map)))
      {
         error = true;
         return _ret;
      }

      n.f5.accept(this, argu);

      Params.remove(l);
      return (R) (map.getClassList().get(used).getMethodList().get(firstm).getreturnType());

      }
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      String t = (String) n.f0.accept(this, argu);
      int last = Params.size()-1;
      Params.get(last).add(t);
      n.f1.accept(this, argu);
      return _ret;

      }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber == 1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      String t = (String) n.f1.accept(this, argu);
      Params.get(Params.size()-1).add(t);
      return _ret;

      }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;}

      else{

         R _ret=null;
         isIdentifier = true;
         String e = (String) n.f0.accept(this, argu);
         isIdentifier=false;
         return (R) e;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "int";

      }
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "bool";
      }
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "bool";
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber == 1){
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      return (R) id;}

      else{

         R _ret=null;
         if(! isIdentifier)
         {
            String id = (String) n.f0.accept(this, argu);
            return (R) id;
         }
         else{
            String s = (String)n.f0.accept(this, argu);
            return (R) (map.FindType(curClass,curMethod,s));
         }
      }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;}

      else{
         R _ret=null;
         n.f0.accept(this, argu);
         String s = map.getClassList().get(curClass).getName();
         return (R) s;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return (R) "int[]";
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      isIdentifier = false;
      String type = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) type;
      }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      String s = (String) n.f1.accept(this, argu);
      if(! map.SameType(curClass, curMethod, s, "bool"))
      {
         error = true;
         return _ret;
      }
      return (R) "bool";
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1){
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;}

      else{

      R _ret=null;
      n.f0.accept(this, argu);
      String e = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) e;

      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
