//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {


   static class VariableDec{

      String name;
      String type;
      String memtype;
      int varsize;
      boolean class_var;
      int class_offset;
      boolean method_var;
      int var_num;
      boolean method_param;
      int param_num;

      VariableDec()
      {
         varsize = 4;
         class_var = false;
         class_offset = 0;
         method_var = false;
         var_num = 0;
         method_param = false;
         param_num = 0;
      }

      public String getName()
      {
         return name;
      }

      public void setName(String n)
      {
         this.name = n;
      }

      public String getMemType()
      {
         return memtype;
      }

      public void setMemType(String n)
      {
         this.memtype = n;
      }

      public String getType()
      {
         return type;
      }

      public void setType(String t)
      {
         this.type = t;
      }

      public int getClass_offset()
      {
         return class_offset;
      }
      public void setClass_offset(int x)
      {
         this.class_offset = x;
      }

      public int getVar_num()
      {
         return var_num;
      }
      public void setVar_num(int x)
      {
         this.var_num = x;
      }

      public int getParam_num()
      {
         return param_num;
      }
      public void setParam_num(int x)
      {
         this.param_num = x;
      }


   }

   static class OffsetCalcClass{

      boolean class_var;
      boolean method_var;
      boolean method_param;

      int class_offset;
      int var_num;
      int param_num;

      OffsetCalcClass()
      {
         class_var = false;
         method_var = false;
         method_param = false;
         class_offset = 0;
         var_num = 0;
         param_num = 0;
      }

      public int getClass_offset()
      {
         return class_offset;
      }
      public void setClass_offset(int x)
      {
         this.class_offset = x;
      }

      public int getVar_num()
      {
         return var_num;
      }
      public void setVar_num(int x)
      {
         this.var_num = x;
      }

      public int getParam_num()
      {
         return param_num;
      }
      public void setParam_num(int x)
      {
         this.param_num = x;
      }

      public boolean osset()
      {
         return (class_var || method_param || method_var);
      }
   }

   static class MethDec{

      String name;
      String returntype;
      String methodlabel;

      Vector<VariableDec> VariableList;
      Vector<VariableDec> ParamList;

      int meth_offset;

      MethDec()
      {
         meth_offset = 0;
         VariableList = new Vector<VariableDec>();
         ParamList = new Vector<VariableDec>();
      }

      public void setName(String n)
      {
         this.name = n;
      }
      public void setReturnType(String t)
      {
         this.returntype = t;
      }
      public void setMethLabel(String l)
      {
         this.methodlabel = l;
      }

      public String getName()
      {
         return name;
      }
      public String getReturnType()
      {
         return returntype;
      }
      public String getMethLabel()
      {
         return methodlabel;
      }

      public void SetParameters()
      {
         int i = 0;
         int s = ParamList.size();
         while(i<s)
         {
            ParamList.get(i).param_num = i+1;
            ParamList.get(i).method_param = true;
            i++;
         }
      }
      
      public void SetSize()
      {
         int i = 0;
         int s = VariableList.size();
         while(i<s)
         {
            VariableList.get(i).var_num = i+1+ParamList.size();
            VariableList.get(i).method_var = true;
            i++;
         }
      }

      public void SetOffset(String ID, OffsetCalcClass os)
      {
         if(ID==null) return;

         int p = ParamList.size();
         for(int i=0;i<p;i++)
         {
            String str = ParamList.get(i).getName();
            if(str==ID)
            {
               os.method_param = true;
               os.param_num = ParamList.get(i).param_num;
            }
         }
         int v = VariableList.size();
         for(int i=0;i<v;i++)
         {
            String str = VariableList.get(i).getName();
            if(str==ID)
            {
               os.method_var = true;
               os.var_num = VariableList.get(i).var_num;
            }
         }
      }


      public void ListAllVars()
      {
         int s = VariableList.size();
         int i=0;
         while(i<s)
         {
            System.out.print(i+1);
            System.out.print(VariableList.get(i).getName());
         }
      }

      public String GetIDType(String s)     
      {
         String ret = null;
         if(s==null){
            return ret;
         }
         else{
            
            int p = ParamList.size();
            for(int i=0;i<p;i++)
            {
               if(ParamList.get(i).getName()==s)
                  ret = ParamList.get(i).getType();
            }
            int v = VariableList.size();
            for(int i=0;i<v;i++)
            {
               if(VariableList.get(i).getName()==s)
                  ret = VariableList.get(i).getType();
            }

            return ret;
         }
      }
   }


   static class LabelList{

      String FuncName;
      String label;

      public String getLabel()
      {
         return label;
      }
      public String getFuncName()
      {
         return FuncName;
      }
      public void setLabel(String s)
      {
         this.label = s;
      }
      public void setFuncName(String s)
      {
         this.FuncName = s;
      }
   }


   static class ClassTable{

      String name;
      String extension;

      int class_size;
      int class_offset;

      Vector<VariableDec> VariableList;
      Vector<MethDec> MethodList;
      Vector<LabelList> FuncMap;

      ClassTable()
      {
         class_size=4;
         class_offset=0;

         VariableList = new Vector<VariableDec>();
         MethodList = new Vector<MethDec>();
         FuncMap = new Vector<LabelList>();
      }

      public void setName(String s)
      {
         this.name = s;
      }
      public void setExtension(String e)
      {
         this.extension = e;
      }
      public void setFuncMap(Vector<LabelList> v)
      {
         FuncMap = v;
      }

      public String getName()
      {
         return name;
      }
      public String getExtension()
      {
         return extension;
      }
      public Vector<VariableDec> getVariableList()
      {
         return VariableList;
      }
      public Vector<MethDec> getMethodList()
      {
         return MethodList;
      }
      public Vector<LabelList> getFuncMap()
      {
         return FuncMap;
      }


      public void setClass_size(int x)
      {
         this.class_size=x;
      }
      public int getClass_offset() 
      {
         return class_offset;
      }


      public void Prep()
      {
         class_size+=class_offset;

         int i = 0;
         int s = VariableList.size();

         while(i<s)
         {
            VariableList.get(i).class_var = true;
            VariableList.get(i).class_offset = class_size;
            class_size+=VariableList.get(i).varsize;
            i++;
         }
         s = MethodList.size();
         i=0;
         while(i<s)
         {
            MethodList.get(i).SetSize();
            MethodList.get(i).SetParameters();
            i++;
         }
      }


      public int FindMethodIndex(String s)
      {
         int pos = -1;
         if(s==null) return pos;
         int l = MethodList.size();
         for(int i=0;i<l;i++)
         {
            if(MethodList.get(i).name == s) pos = i;
         }
         return pos;
      }


      public void SetOffset(String ID, OffsetCalcClass os)
      {
         if(ID==null) return;

         int s = VariableList.size();
         for(int i=0;i<s;i++)
         {
            String x = VariableList.get(i).getName();
            if(x==ID)
            {
               os.class_offset = VariableList.get(i).class_offset;
               os.class_var = true;
            }
         }
      }

      public void ListAllVars()
      {
         int s = VariableList.size();
         int i=0;
         while(i<s)
         {
            System.out.print(i+1);
            System.out.print(VariableList.get(i).getName());
         }
      }

      public void ListAllMeths()
      {
         int s = MethodList.size();
         int i=0;
         while(i<s)
         {
            System.out.print(i+1);
            System.out.print(MethodList.get(i).getName() + " "); 
            System.out.print(MethodList.get(i).getMethLabel());
         }
      }

      public void ListAllLabels()
      {
         int s = FuncMap.size();
         System.out.print(s);
         int i=0;
         while(i<s)
         {
            System.out.print(i+1);
            System.out.print(FuncMap.get(i).getFuncName() + " "); 
            System.out.print(FuncMap.get(i).getLabel());
         }
      }

      public String GetIDType(String s)     
      {
         String ret = null;
         if(s==null){
            return ret;
         }
         else{
            int v = VariableList.size();
            for(int i=0;i<v;i++)
            {
               if(VariableList.get(i).getName()==s)
                  ret = VariableList.get(i).getType();
            }
            return ret;
         }
      }
   }


   public static class SymbolTable{

      public int maxParams;
      public int labelno;

      Vector<ClassTable> ClassList;

      SymbolTable()
      {
         maxParams = 100;
         labelno=1;
         ClassList = new Vector<ClassTable>();
      }

      public Vector<ClassTable> getClassList() 
      {
         return ClassList;
      }

      public void setMaxParams(int x)
      {
         this.maxParams = x;
      }
      public int getMaxParams()
      {
         return maxParams;
      }

      public void setLabelNo(int x)
      {
         this.labelno = x;
      }
      public int getLabelNo()
      {
         return labelno;
      }

      public int FindClassIndex(String id)
      {
         int pos = -1;
         if(id==null) return pos;
         else
         {
            int s = ClassList.size();
            for(int i=0;i<s;i++)
            {
               String str1 = ClassList.get(i).getName();
               if(str1==id)
                  pos = i;
            }
            return pos;
         }
      }

      public Vector<LabelList> classFuncTable(int i)
      {
         String tests = ClassList.get(i).getExtension();
         if(tests==null)
         {
            Vector<LabelList> fmap = new Vector<LabelList>();
            int s = ClassList.get(i).getMethodList().size();
            for(int it=0;it<s;it++)
            {
               LabelList og = new LabelList();
               og.FuncName = ClassList.get(i).getMethodList().get(it).getName();
               og.label = ClassList.get(i).getMethodList().get(it).getMethLabel();
               ClassList.get(i).getMethodList().get(it).meth_offset = 4*fmap.size();
               fmap.add(og);
            }
            return fmap;
         }
         else
         {
            String ext = ClassList.get(i).getExtension();
            int parent = this.FindClassIndex(ext);
            Vector<LabelList> fmap = new Vector<LabelList>(classFuncTable(parent));

            int s = ClassList.get(i).getMethodList().size();
            for(int it=0;it<s;it++)
            {
               int flag = 0;
               int l = fmap.size();
               for(int itt=0;itt<l;itt++)
               {
                  String x1 = fmap.get(itt).getFuncName();
                  String y1 = ClassList.get(i).getMethodList().get(it).getName();
                  if(x1==y1)
                  {
                     flag+=2;
                     fmap.get(itt).label = ClassList.get(i).getMethodList().get(it).getMethLabel();
                     ClassList.get(i).getMethodList().get(it).meth_offset = 4*itt;
                     break;
                  }
               }
               if(flag<1)
               {
                  LabelList og = new LabelList();
                  og.setFuncName(ClassList.get(i).getMethodList().get(it).getName());
                  og.setLabel(ClassList.get(i).getMethodList().get(it).getMethLabel());
                  int s2 = fmap.size();
                  ClassList.get(i).getMethodList().get(it).meth_offset = s;
                  fmap.add(og);
               }
            }

            return fmap;

         }
      }

      public void PrintAllClass()
      {
         int s = ClassList.size();
         int i=0;

         while(i<s)
         {
            System.out.print(i);
            System.out.print(ClassList.get(i).getName());
            System.out.print(" ");
            System.out.print(ClassList.get(i).getExtension());
         }
      }


      public void PrepFuncTables()
      {
         int i=0;
         while(i<ClassList.size())
         {
            ClassList.get(i).setFuncMap(this.classFuncTable(i));
            i++;
         }
      }

      public void Prep()
      {
         int s = ClassList.size();

         for(int i=0;i<s;i++)
         {
            String ancestor = ClassList.get(i).getExtension();
            while(ancestor!=null)
            {
               ClassList.get(i).class_offset = ClassList.get(this.FindClassIndex(ancestor)).getVariableList().size() * 4;
               ancestor = ClassList.get(this.FindClassIndex(ancestor)).getExtension();
            }
         }

         for(int i=0;i<s;i++)
         {
            ClassList.get(i).Prep();
            for(int j=0;j<ClassList.get(i).getMethodList().size();j++)
            {
               String l = "L"+labelno+ClassList.get(i).getMethodList().get(j).getName();
               ClassList.get(i).getMethodList().get(j).setMethLabel(l);
               labelno++;
            }
         }

         this.PrepFuncTables();
      }


      public void setMaxParameters()
      {
         int l = ClassList.size();
         for(int i=0;i<l;i++)
         {
            for(int j=0;j<ClassList.get(i).getMethodList().size();j++)
            {
               int x = ClassList.get(i).getMethodList().get(j).ParamList.size();
               int y = ClassList.get(i).getMethodList().get(j).VariableList.size();
               maxParams = Math.max(x+y, maxParams);
            }
         }
      }

      public void CheckAncestorOS(int curclass, String id, OffsetCalcClass os)
      {
         if(curclass==-1) return;
         ClassList.get(curclass).SetOffset(id,os);
         if(!os.osset() && ClassList.get(curclass).getExtension()!=null)
            this.CheckAncestorOS(this.FindClassIndex(ClassList.get(curclass).getExtension()),id,os);
      }

      public void SetOffset(int curclass, int curmeth, String id, OffsetCalcClass os)
      {
         if(curclass==-1 || curmeth == -1) return;
         ClassList.get(curclass).MethodList.get(curmeth).SetOffset(id,os);
         if(!os.osset())
            this.CheckAncestorOS(curclass,id,os);
      }

      public String FindType(int curclass, int curmeth, String id)
      {
         if(curclass==-1 || curmeth == -1) return null;
         else{
            String ret = ClassList.get(curclass).MethodList.get(curmeth).GetIDType(id);
            if(ret == null) ret = CheckAncestor(curclass,id);
            return ret;
         }
      }

      public int FindMethOS(String type, String meth)
      {
         int classloc = this.FindClassIndex(type);
         int methloc = ClassList.get(classloc).FindMethodIndex(meth);

         int ret = ClassList.get(classloc).getMethodList().get(methloc).meth_offset;
         return ret;
      }

      public String CheckAncestor(int curclass, String id)
      {
         String ret = null;
         if(curclass==-1) return ret;
         else
         {
            ret = ClassList.get(curclass).GetIDType(id);
            String ex = ClassList.get(curclass).getExtension();
            if(ret==null && ex!=null)
               ret = this.CheckAncestor(this.FindClassIndex(ClassList.get(curclass).getExtension()),id);

            return ret;
         }
      }  

   }



   public int passnumber = 1;
   public SymbolTable Map = new SymbolTable();

   Vector<VariableDec> VList = new Vector<VariableDec>();
   Vector<MethDec> MList = new Vector<MethDec>();

   int curClass = -1;
   int curMethod = -1;
   boolean isIdentifier = false;
   String lastSeenType;
   boolean retrieval = false;

   public int curTemp;
   public int labelnumber;

   public Vector<Vector<Integer>> resolveParams = new Vector<Vector<Integer>>();

   public void finishRetrieval(int tempo, String cond, boolean retriever)
   {
      if(!retriever) System.out.print("MOVE TEMP "+tempo+" TEMP "+cond+"\n");
      else System.out.print("HLOAD TEMP "+tempo+" TEMP "+cond+" 0 "+"\n");
   }


   //
   // Auto class visitors--probably don't need to be overridden.
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         System.out.print("MAIN\n");
         n.f0.accept(this, argu);
         System.out.print("END\n");
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		if(passnumber==1)
      {
         ClassTable C = new ClassTable();
         R _ret=null;

         n.f0.accept(this, argu);
         C.setName((String) n.f1.accept(this, argu));
         C.setExtension(null);
         for(VariableDec val : VList)
         {
            C.VariableList.add(val);
         }
         VList.clear();
         for(MethDec val : MList)
         {
            C.MethodList.add(val);
         }
         MList.clear();
         Map.ClassList.add(C);

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else 
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		
      if(passnumber==1)
      {
         ClassTable C = new ClassTable();
         R _ret=null;
         n.f0.accept(this, argu);
         C.setName((String)n.f1.accept(this, argu));
         C.setExtension(null);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         for(VariableDec val : VList)
         {
            C.VariableList.add(val);
         }
         VList.clear();
         n.f4.accept(this, argu);
         for(MethDec val : MList)
         {
            C.MethodList.add(val);
         }
         MList.clear();
         n.f5.accept(this, argu);
         Map.ClassList.add(C);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         curClass = Map.FindClassIndex((String) n.f1.accept(this, argu));
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         curClass = -1;
         return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		
      if(passnumber==1)
      {
         ClassTable C = new ClassTable();
         R _ret=null;
         n.f0.accept(this, argu);
         C.setName((String)n.f1.accept(this, argu));
         n.f2.accept(this, argu);
         String e = (String)n.f3.accept(this, argu);
         C.setExtension(e);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         for(VariableDec val : VList)
         {
            C.VariableList.add(val);
         }
         VList.clear();
         n.f6.accept(this, argu);
         for(MethDec val : MList)
         {
            C.MethodList.add(val);
         }
         MList.clear();
         n.f7.accept(this, argu);
         Map.ClassList.add(C);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         curClass = Map.FindClassIndex((String) n.f1.accept(this, argu));
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         curClass = -1;
         return _ret;
      }


   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         String ty = (String)n.f0.accept(this, argu);
         String na = (String)n.f1.accept(this, argu);
         VariableDec v = new VariableDec();
         v.setType(ty);
         v.setName(na);
         VList.add(v);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }

     
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */

   public R visit(MethodDeclaration n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         MethDec m = new MethDec();
         n.f0.accept(this, argu);
         m.setReturnType((String)n.f1.accept(this, argu));
         m.setName((String)n.f2.accept(this, argu));
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         for(VariableDec v : VList)
         {
            m.ParamList.add(v);
         }
         VList.clear();
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         for(VariableDec v : VList)
         {
            m.VariableList.add(v);
         }
         VList.clear();
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         MList.add(m);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int x = Map.getClassList().get(curClass).FindMethodIndex((String)n.f2.accept(this, argu));
         curMethod=x;
         System.out.print(Map.getClassList().get(curClass).getMethodList().get(curMethod).methodlabel+" [");
         System.out.print((Map.ClassList.get(curClass).getMethodList().get(curMethod).ParamList.size()+1)+"]\n");
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         System.out.print("BEGIN\n");
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         String loc = (String)n.f10.accept(this, argu);
         boolean retr = retrieval;
         boolean ret2 = retrieval;
         finishRetrieval(curTemp,loc,retr);
         System.out.print("RETURN TEMP "+curTemp+"\n");
         curTemp++;
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         curMethod = -1;
         System.out.print("END\n");
         return _ret;
      }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         VariableDec v = new VariableDec();
         v.setType((String)n.f0.accept(this, argu));                
         v.setName((String)n.f1.accept(this, argu));
         VList.add(v);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         String t = (String)n.f0.accept(this, argu);
         return (R) t;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		
      if(passnumber==1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return (R) "int[]";
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		
      if(passnumber==1)
      {
         n.f0.accept(this, argu);
         return (R) "bool";
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		
      if(passnumber==1)
      {
         n.f0.accept(this, argu);
         return (R) "int";
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
        
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      
      if(passnumber==1)  
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else 
      {
         R _ret=null;
         isIdentifier = true;
         String loc = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String toSet = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;
         finishRetrieval(curTemp, toSet, ret2);
         if(!ret1) System.out.print("MOVE TEMP "+loc+" TEMP "+curTemp+"\n");
         else if(ret1) System.out.print("HSTORE TEMP "+loc+" 0 TEMP "+curTemp+"\n");
         curTemp++;
         n.f3.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         isIdentifier = true;
         int t =curTemp;
         curTemp+=4;
         String loc = (String) n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         isIdentifier = false;
         isIdentifier = true;
         isIdentifier = false;
         n.f1.accept(this, argu);
         String os = (String) n.f2.accept(this, argu);
         boolean ret2 = retrieval;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         String toSet = (String) n.f5.accept(this, argu);
         boolean ret3 = retrieval;
         boolean ret4 = retrieval;
         finishRetrieval(curTemp,loc,ret1);
         finishRetrieval(curTemp+1,os,ret2);
         finishRetrieval(curTemp+2,toSet,ret3);
         System.out.print("MOVE TEMP "+(curTemp+1)+" TIMES TEMP "+(curTemp+1)+" 4\n"+"MOVE TEMP "+(curTemp+1)+" PLUS TEMP "+(curTemp+1)+" 4\n");
         System.out.print("MOVE TEMP "+curTemp+" PLUS TEMP "+curTemp+" TEMP "+(curTemp+1)+"\n"+"HSTORE TEMP "+curTemp+" 0 TEMP "+(curTemp+2)+"\n");
         n.f6.accept(this, argu);
         curTemp+=3;
         return _ret;
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
         
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String cond = (String)n.f2.accept(this, argu);
         boolean ret1 = retrieval;
         int jumpto = labelnumber;
         labelnumber++;
         finishRetrieval(curTemp,cond,ret1);
         System.out.print("CJUMP TEMP "+curTemp+" L"+jumpto+"\n");
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.print("L"+jumpto+"\n"+"NOOP\n");
         return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String cond = (String)n.f2.accept(this, argu);
         boolean ret1 = retrieval;
         int jumpto = labelnumber;
         labelnumber = labelnumber+2;
         finishRetrieval(curTemp,cond,ret1);
         System.out.print("CJUMP TEMP "+curTemp+" L"+(jumpto+1)+"\n");
         curTemp++;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.print("JUMP L"+jumpto+"\n");
         n.f5.accept(this, argu);
         System.out.print("L"+(jumpto+1)+"\n");
         n.f6.accept(this, argu);
         System.out.print("L"+jumpto+"\n"+"NOOP\n");
         return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         int jumpto = labelnumber;
         labelnumber +=2;
         System.out.print("L"+jumpto+"\n");
         String cond = (String) n.f2.accept(this, argu);
         boolean ret1 = retrieval;
         finishRetrieval(curTemp,cond,ret1);
         System.out.print("CJUMP TEMP "+curTemp+" L"+(jumpto+1)+"\n");
         curTemp++;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.print("JUMP L"+jumpto+"\n"+"L"+(jumpto+1)+"\n"+"NOOP\n");
         return _ret;
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String loc = (String) n.f2.accept(this, argu);
         boolean ret1 = retrieval;
         finishRetrieval(curTemp,loc,ret1);
         System.out.print("PRINT TEMP "+curTemp+"\n");
         curTemp++;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc = (String) n.f0.accept(this, argu);
         return (R) loc;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String) n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String) n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp,loc1,ret1);
         finishRetrieval(curTemp+1,loc2,ret2);

         System.out.print("MOVE TEMP "+(curTemp+2)+" TIMES TEMP "+curTemp+" TEMP "+(curTemp+1)+"\n");
         int retvalue = curTemp+2;
         curTemp+=3;
         retrieval=false;
         return (R) Integer.toString(retvalue);
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String) n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+3,loc1,ret1);
         finishRetrieval(curTemp+4,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" TIMES TEMP "+(curTemp+3)+" TEMP "+(curTemp+4)+"\n"+"MOVE TEMP "+(curTemp+1)+" PLUS TEMP "+(curTemp+3)+" TEMP "+(curTemp+4)+"\n");
         System.out.print("MOVE TEMP "+(curTemp+2)+" MINUS TEMP "+(curTemp+1)+" TEMP "+curTemp+"\n");

         String retval = Integer.toString(curTemp+2);
         curTemp+=5;
         retrieval=false;
         return (R) retval;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+1,loc1,ret1);
         finishRetrieval(curTemp+2,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" LE TEMP "+(curTemp+1)+" TEMP "+(curTemp+2)+"\n");

         String retvalue = Integer.toString(curTemp);
         curTemp+=3;
         retrieval=false;

         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+1,loc1,ret1);
         finishRetrieval(curTemp+2,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" NE TEMP "+(curTemp+1)+" TEMP "+(curTemp+2)+"\n");

         String retvalue = Integer.toString(curTemp);
         curTemp+=3;
         retrieval = false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+1,loc1,ret1);
         finishRetrieval(curTemp+2,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" PLUS TEMP "+(curTemp+1)+" TEMP "+(curTemp+2)+"\n");

         String retvalue = Integer.toString(curTemp);
         curTemp+=3;
         retrieval = false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+1,loc1,ret1);
         finishRetrieval(curTemp+2,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" MINUS TEMP "+(curTemp+1)+" TEMP "+(curTemp+2)+"\n");

         String retvalue = Integer.toString(curTemp);
         curTemp+=3;
         retrieval = false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+1,loc1,ret1);
         finishRetrieval(curTemp+2,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" TIMES TEMP "+(curTemp+1)+" TEMP "+(curTemp+2)+"\n");

         String retvalue = Integer.toString(curTemp);
         curTemp+=3;
         retrieval = false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc1 = (String)n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String loc2 = (String)n.f2.accept(this, argu);
         boolean ret2 = retrieval;

         finishRetrieval(curTemp+1,loc1,ret1);
         finishRetrieval(curTemp+2,loc2,ret2);

         System.out.print("MOVE TEMP "+curTemp+" DIV TEMP "+(curTemp+1)+" TEMP "+(curTemp+2)+"\n");

         String retvalue = Integer.toString(curTemp);
         curTemp+=3;
         retrieval = false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc = (String) n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         n.f1.accept(this, argu);
         String os = (String) n.f2.accept(this, argu);
         boolean ret2 = retrieval;
         n.f3.accept(this, argu);

         finishRetrieval(curTemp,loc,ret1);
         finishRetrieval(curTemp+1,os,ret2);

         System.out.print("MOVE TEMP "+(curTemp+1)+" TIMES TEMP "+(curTemp+1)+" 4\n"+"MOVE TEMP "+(curTemp+1)+" PLUS TEMP "+(curTemp+1)+" 4\n");
         System.out.print("MOVE TEMP "+curTemp+" PLUS TEMP "+curTemp+" TEMP "+(curTemp+1)+"\n"+"HLOAD TEMP "+(curTemp+2)+" TEMP "+curTemp+" "+ "0\n");

         String retvalue = Integer.toString(curTemp+2);
         curTemp+=3;
         retrieval=false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc = (String) n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         finishRetrieval(curTemp,loc,ret1);
         System.out.print("HLOAD TEMP "+(curTemp+1)+" TEMP "+curTemp+" "+ "0\n");
         int r = curTemp+1;
         String retvalue = Integer.toString(r);
         curTemp+=2;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return (R) retvalue;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
      }
      else
      {
         String loc = (String) n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String classtype = lastSeenType;
         isIdentifier=false;
         boolean ret1 = retrieval;

         String method = (String) n.f2.accept(this, argu);
         int methodosval = Map.FindMethOS(classtype,method);
         String rettype = Map.getClassList().get(Map.FindClassIndex(classtype)).getMethodList().get(Map.getClassList().get(Map.FindClassIndex(classtype)).FindMethodIndex(method)).getReturnType();
         
         n.f3.accept(this, argu);

         Vector<Integer> newv = new Vector<Integer>();
         resolveParams.add(newv);

         n.f4.accept(this, argu);
         n.f5.accept(this, argu);

         finishRetrieval(curTemp,loc,ret1);
         System.out.print("HLOAD TEMP "+(curTemp+1)+" TEMP "+curTemp+" 0 \n"+"MOVE TEMP "+(curTemp+2) +" PLUS TEMP "+(curTemp+1)+" "+methodosval+"\n");
         System.out.print("HLOAD TEMP "+(curTemp+3)+" TEMP "+(curTemp+2)+" 0 \n"+"MOVE TEMP "+(curTemp+4)+" CALL TEMP "+(curTemp+3)+" (TEMP "+curTemp);

         String retvalue = Integer.toString(curTemp+4);
         curTemp+=5;
         int l = resolveParams.size()-1;
         for(int i=0;i<resolveParams.get(l).size();i++)
            System.out.print(" TEMP "+resolveParams.get(resolveParams.size()-1).get(i));
         System.out.print(")\n");
         int la = resolveParams.size()-1;
         resolveParams.remove(la);
         lastSeenType = rettype;
         retrieval=false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         String par = (String) n.f0.accept(this, argu);
         boolean ret1 = retrieval;
         finishRetrieval(curTemp,par,ret1);
         int l = resolveParams.size()-1;
         resolveParams.get(l).add(curTemp);
         curTemp++;
         n.f1.accept(this, argu);
         retrieval=false;
         return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         String par = (String) n.f1.accept(this, argu);
         boolean ret1 = retrieval;
         finishRetrieval(curTemp,par,ret1);
         resolveParams.get(resolveParams.size()-1).add(curTemp);
         curTemp++;
         retrieval=false;
         return _ret;
      }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         isIdentifier=true;
         String loc = (String)n.f0.accept(this, argu);
         isIdentifier=false;
         return (R) loc;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         String val = (String) n.f0.accept(this, argu);
         System.out.print("MOVE TEMP "+curTemp+" "+val+"\n");
         String retvalue = Integer.toString(curTemp);
         curTemp++;
         retrieval=false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         System.out.print("MOVE TEMP "+curTemp+" "+1+"\n");
         String retvalue = Integer.toString(curTemp);
         curTemp++;
         retrieval=false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         System.out.print("MOVE TEMP "+curTemp+" "+0+"\n");
         int re = curTemp;
         String retvalue = Integer.toString(re);
         curTemp++;
         retrieval=false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         String id = (String)n.f0.accept(this, argu);
         return (R) id;
      }
      else
      {
         R _ret=null;
         String id = (String) n.f0.accept(this, argu);
         if(!isIdentifier)
         {               
            lastSeenType=id;
            return (R) id;
         }
         OffsetCalcClass os = new OffsetCalcClass();
         Map.SetOffset(curClass,curMethod,id,os);
         String str = Map.FindType(curClass,curMethod,id);
         lastSeenType = str;

         if(os.class_var)
         {
            System.out.print("MOVE TEMP "+curTemp+" PLUS TEMP 0 "+os.class_offset+ "\n");
            int retvalue = curTemp;
            curTemp++;
            retrieval=true;
            return (R) Integer.toString(retvalue);
         }
         else if(os.method_param)
         {
            int retvalue = os.param_num;
            retrieval=false;
            return (R) Integer.toString(retvalue);
         }
         else if(os.method_var)
         {
            int retvalue = os.var_num;
            retrieval=false;
            return (R) Integer.toString(retvalue);
         }
         else
         {
            System.out.println("ERROR\n");
            return _ret;
         }
      }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         lastSeenType=Map.getClassList().get(curClass).getName();
         retrieval=false;
         return (R) "0";
      }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String size = (String) n.f3.accept(this, argu);
         boolean ret1 = retrieval;
         n.f4.accept(this, argu);
         finishRetrieval(curTemp,size,ret1);

         System.out.print("MOVE TEMP "+(curTemp+1) +" TEMP "+curTemp+"\n"+"MOVE TEMP "+curTemp +" TIMES TEMP "+curTemp+" 4 \n");
         System.out.print("MOVE TEMP "+curTemp+" PLUS TEMP "+curTemp+" 4 \n"+"MOVE TEMP "+(curTemp+2)+" HALLOCATE TEMP "+curTemp+"\n");
         System.out.print("HSTORE TEMP "+(curTemp+2)+" 0 TEMP "+(curTemp+1)+"\n");

         String retvalue = Integer.toString(curTemp+2);
         curTemp+=3;
         retrieval=false;
         return (R) retvalue;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         isIdentifier=false;
         String alloc = (String) n.f1.accept(this, argu);
         ClassTable classdeets = Map.getClassList().get(Map.FindClassIndex(alloc));
         System.out.print("MOVE TEMP "+curTemp+" HALLOCATE "+(4*classdeets.getFuncMap().size()));
         System.out.print("MOVE TEMP "+(curTemp+1)+" HALLOCATE "+(classdeets.class_size)+"\n"+"HSTORE TEMP "+(curTemp+1)+" 0 TEMP "+curTemp+"\n");
         int retvalue = (curTemp+1);
         curTemp+=2;
         for(int i=0;i<classdeets.getFuncMap().size();i++)
         {
            System.out.print("MOVE TEMP "+curTemp+" "+classdeets.getFuncMap().get(i).getLabel()+"\n");
            System.out.print("HSTORE TEMP "+(retvalue-1)+" "+(4*i)+" TEMP "+curTemp+"\n");
            curTemp++;
         }
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         retrieval=false;
         return (R) Integer.toString(retvalue);
      }
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         
         n.f0.accept(this, argu);
         String cond = (String) n.f1.accept(this, argu);
         boolean ret1 = retrieval;
         finishRetrieval(curTemp,cond,ret1);

         System.out.print("CJUMP TEMP "+curTemp+" L"+labelnumber+" \n");
         System.out.print("MOVE TEMP "+(curTemp+1)+" " +0+"\n"+"JUMP "+" L"+(labelnumber+1)+" \n");
         System.out.print("L"+labelnumber+"\n"+"MOVE TEMP "+(curTemp+1)+" " +1+"\n"+"L"+(labelnumber+1)+"\n"+"NOOP\n");

         String retvalue = Integer.toString(curTemp+1);
         curTemp+=2;
         labelnumber+=2;
         retrieval=false;

         return (R) retvalue;
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         n.f0.accept(this, argu);
         String loc = (String) n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return (R) loc;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
         
      if(passnumber==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

}
